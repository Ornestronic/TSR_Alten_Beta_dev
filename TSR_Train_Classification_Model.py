{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copie de TSR_Train.ipynb","provenance":[{"file_id":"1GwHDJ0OnwlvU8hNWKDOROicow3-HEuGp","timestamp":1585696536529}],"collapsed_sections":[],"mount_file_id":"1GwHDJ0OnwlvU8hNWKDOROicow3-HEuGp","authorship_tag":"ABX9TyOqtU2ylmCx+OTFU3zqidmj"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"_zY761CfWR2g","colab_type":"text"},"source":["# **I) PHASE D'ENTRAINNEMENT**"]},{"cell_type":"markdown","metadata":{"id":"50ko7VaMUwvT","colab_type":"text"},"source":["# *IMPORTATION DE LA BIBLIOTHEQUE FASTAI*\n","*Fast.ai devoloppée par Jeremy Howard est une bibliothèque permettant de faire de l'entrainement des neurones de façon rapide et plus dynamique sans avoir besoin de trop s'y connaître dans la création des réseaux de neurones*"]},{"cell_type":"code","metadata":{"id":"qIPNz-MITREE","colab_type":"code","colab":{}},"source":["from fastai import *\n","from fastai.vision import *\n","import numpy as np "],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"z4Y0PwvyXxQR","colab_type":"text"},"source":["# *Préprocessage de la dataset*\n","Ici nous mettons en forme la dataset ainsi que toutes les transformations pouvant être apportées afin d'accentuer l'apprentissage de notre réseau de neurones."]},{"cell_type":"code","metadata":{"id":"XroAcFZOYRz9","colab_type":"code","colab":{}},"source":["path_train='/content/drive/My Drive/TSR_data/Train'\n","np.random.seed(42)\n","tfm = get_transforms(do_flip=False, flip_vert=False, max_rotate=4.0, max_zoom=1.1, max_lighting=0.35, max_warp=0.15, p_affine=0.65, p_lighting=0.55)\n","data = ImageDataBunch.from_folder(path_train, train=\"Train\", valid_pct=0.2, ds_tfms=tfm, size=224,bs=64, num_workers=4).normalize(imagenet_stats)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"RCbt17fLdVio","colab_type":"code","colab":{}},"source":["#Affichage des classes pour s'assurer que la mise en forme a été faite correctement.\n","data.classes"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"rH3Nu0fnd_3l","colab_type":"code","colab":{}},"source":["#Un petit affichage pour avoir un apperçue sur les data.\n","data.show_batch(6, figsize=(15,18))"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"lpYiYnj-f3eA","colab_type":"text"},"source":["# *ENTRAINEMENT DU MODEL*\n","Ici pour un début nous choisirons le modèle Squeeznet car il est léger et par conséquent pourra prédire rapidement. La facilité que nous offre la bibliothèque fastai vient notemment du fait que nous n'avons pas besoin de plus de deux lignes de codes pour faire l'entrainement comme vous le voyez ci-dessous. "]},{"cell_type":"code","metadata":{"id":"pBXKpC-dfFFH","colab_type":"code","colab":{}},"source":["#création du learner basé sur l'architecture du squeeznet1_1\n","learn = cnn_learner(data, models.squeezenet1_1, pretrained=True, metrics=[accuracy])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ehRY8VEFhIcx","colab_type":"code","colab":{}},"source":["#Première phase d'entrainement\n","learn.fit_one_cycle(5)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Q1_OgT83heab","colab_type":"code","colab":{}},"source":["#Nous enregistrons notre model premièrement afin de le réutiliser pour un second appprentissage\n","learn.save('tsr1_0')"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"K7qviGa7lnFW","colab_type":"text"},"source":["Afin de mieux entrainer notre modèle, nous allons déterminer certains paramètres lui offrant un apprentisage approfondi(*learning rate*)"]},{"cell_type":"code","metadata":{"id":"c4c3f2JUoYKT","colab_type":"code","colab":{}},"source":["#learn.load('tsr1_0')\n","learn.unfreeze()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ps-TwtbNobLd","colab_type":"code","colab":{}},"source":["learn.lr_find(start_lr=1e-8, end_lr=1e-3, stop_div=False)\n","learn.recorder.plot()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"fCZy8R16pEnE","colab_type":"text"},"source":["*Une fois les paramètres trouvés, nous pouvons débuter notre seconde phase d'entrainement afin d'approfondir notre apprentissage*"]},{"cell_type":"code","metadata":{"id":"_1fRddKOc9Ij","colab_type":"code","colab":{}},"source":["learn.fit_one_cycle(6, slice(1.5e-4, 1.9e-4))"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Mpi5nk7MpyPL","colab_type":"text"},"source":["*Une évolution accrue se fait ressentir, ce qui est bon pour nous. Nous pouvons dès maitenant avoir une idée sur les élements qui toout de même réussisse à gêner l'apprentissage du modèle; ceci en utilisant la matrice de confusion* "]},{"cell_type":"code","metadata":{"id":"jbl8hBE_HT-y","colab_type":"code","colab":{}},"source":["interp = ClassificationInterpretation.from_learner(learn)\n","losses,idxs = interp.top_losses()\n","interp.plot_top_losses(10, figsize=(15,11))\n","interp.plot_confusion_matrix(figsize=(12,12), dpi=60)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"sYMEozyMNoEb","colab_type":"code","colab":{}},"source":["#Affichage des classes avec le plus grand nombre de confusions\n","interp.most_confused(min_val=1)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"dZC5sapcYV7c","colab_type":"code","colab":{}},"source":["learn.load('tsr1_1')\n","learn.unfreeze()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"zwAzMCSoY3Ys","colab_type":"code","colab":{}},"source":["#Recherche de nouveaux paramètres afin d'approfondir encore plus l'entrainement\n","learn.lr_find()\n","learn.recorder.plot()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"dyW4wWMOjjvF","colab_type":"code","colab":{}},"source":["learn.fit_one_cycle(8, slice(1.8e-4, 1.98e-4))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"G_N_LaoslhKf","colab_type":"code","colab":{}},"source":["learn.save('tsr1_2')"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"LtCmZPFksNJP","colab_type":"text"},"source":["*Avec exploit nous arrivons a atteindre une précision de **99.74%** lors de l'entrainement et de la validation de notre modèle. Ceci étant, il nous faut désormaais approuver notre modèle en utilisant des images qui lui sont totalement méconnues. Ceci nous conduis donc à la* **phase de test**"]},{"cell_type":"markdown","metadata":{"id":"5FIVcZpTNzeH","colab_type":"text"},"source":["# **II) PHASE DE TEST**"]},{"cell_type":"markdown","metadata":{"id":"uvWoht2XO2Iw","colab_type":"text"},"source":["# *Mise en forme de la data de test*\n","Ce qui est aussi cool avec FAST.AI est qu'il est possible d'importer les transformations que que nous avons défini tout haut et les attribué aux images en entrée pour le test."]},{"cell_type":"code","metadata":{"id":"wMC2dYdxuif_","colab_type":"code","colab":{}},"source":["from zipfile import ZipFile\n","file_name = \"/content/drive/My Drive/dataset.zip\"\n","with ZipFile(file_name,'r') as zipo:\n","  zipo.extractall()\n","  print('done')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"heAlGU6aPZ8M","colab_type":"code","colab":{}},"source":["#importation des transformations\n","learn.load('tsr1_2')\n","learn.export()\n","learn.unfreeze()\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"pfvlslCMP6Xc","colab_type":"code","colab":{}},"source":["#mise en forme\n","path_test = '/content/dataset/Test'\n","test_data = ImageList.from_folder(path_test)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"y7a5x0B_0ZfZ","colab_type":"code","colab":{}},"source":["image_names = np.array([_t.name for _t in test_data.items])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"V4kvx84T06NY","colab_type":"code","colab":{}},"source":["sorted_image_idx = np.argsort(image_names)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"AxCYbxoZ3Asg","colab_type":"text"},"source":["*Prédiction et insertion dans un tableau des résultats*"]},{"cell_type":"code","metadata":{"id":"oSssj4p8ztIB","colab_type":"code","colab":{}},"source":["my_pred = []\n","for i in range(0,12630):\n","  _t=test_data.items[sorted_image_idx[i]]\n","  path_im=\"/content/dataset/Test/{name}\".format(name=_t.name)\n","  img = open_image(path_im)\n","  pred, axe, idx =learn.predict(img)\n","  my_pred.append(pred)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"_RTDDytHz6Py","colab_type":"code","colab":{}},"source":["#mise en forme du tableau afin de le rendre exploitable lors de la comparaison\n","l = []\n","b = []\n","for i in range(0,12630):\n"," l.append(str(my_pred[i]))\n"," b.append(int(l[i]))\n","my_pred=np.array(b)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Cq0OF3RS1PRk","colab_type":"code","colab":{}},"source":["true_labels = []\n","with open(\"/content/drive/My Drive/TSR_data/listTest.csv\", 'r') as _f:\n","    from itertools import dropwhile\n","    for cur_line in dropwhile(lambda x: x.split(\",\")[0].startswith('Train'), _f):\n","        _image, _label = cur_line.strip().split(\",\")\n","        true_labels.append((_image, int(_label)))"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"LdsgaaM23dae","colab_type":"text"},"source":["*Pour terminer, nous procédons au calcul de la précision de notre test en comparant les valeurs prédites aux valeurs réelles des classes de chaque image.*"]},{"cell_type":"code","metadata":{"id":"G7XnI0ZUFxKJ","colab_type":"code","colab":{}},"source":["assert len(true_labels) == my_pred.size\n","acc_ctr = 0\n","tot_ctr = 0\n","for _pl, _tl in zip(my_pred, true_labels):\n","    tot_ctr += 1\n","    if _pl == _tl[1]:\n","        acc_ctr += 1\n","    else:\n","        print('{image} -> Predicted={pred}, Actual={actual}'.format(image=_tl[0], pred=_pl, actual=_tl[1]))\n","accuracy = float(acc_ctr) / tot_ctr\n","print(\"Total Accuracy on Test Set ({images} images): {accuracy}\".format(images=len(true_labels), accuracy=accuracy))"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"j0mFdxD01imq","colab_type":"text"},"source":["*Nous pouvons donc considérer notre modèle comme ayant atteint l'objectif recherché car sur 12630 les résultats des tests nous donnent un résultat de* **98,59%** *d'images prédites correctement, pour un modèle léger de pratiquement 14Mo.![Texte alternatif…](https://)* "]}]}